// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import bo "ic-service/app/model/bo"
import context "context"

import mock "github.com/stretchr/testify/mock"
import pg "github.com/go-pg/pg"

// IcecreamDataAccessor is an autogenerated mock type for the IcecreamDataAccessor type
type IcecreamDataAccessor struct {
	mock.Mock
}

// DeleteByProductId provides a mock function with given fields: _a0, _a1
func (_m *IcecreamDataAccessor) DeleteByProductId(_a0 context.Context, _a1 *bo.Icecream) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *bo.Icecream) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *IcecreamDataAccessor) GetById(_a0 context.Context, _a1 *bo.Icecream) (*bo.Icecream, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *bo.Icecream
	if rf, ok := ret.Get(0).(func(context.Context, *bo.Icecream) *bo.Icecream); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bo.Icecream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bo.Icecream) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByProductId provides a mock function with given fields: _a0, _a1
func (_m *IcecreamDataAccessor) GetByProductId(_a0 context.Context, _a1 *bo.Icecream) (*bo.Icecream, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *bo.Icecream
	if rf, ok := ret.Get(0).(func(context.Context, *bo.Icecream) *bo.Icecream); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bo.Icecream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bo.Icecream) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *IcecreamDataAccessor) Insert(_a0 context.Context, _a1 *bo.Icecream) (*bo.Icecream, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *bo.Icecream
	if rf, ok := ret.Get(0).(func(context.Context, *bo.Icecream) *bo.Icecream); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bo.Icecream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bo.Icecream) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxInsert provides a mock function with given fields: _a0, _a1, _a2
func (_m *IcecreamDataAccessor) TxInsert(_a0 context.Context, _a1 *pg.Tx, _a2 *bo.Icecream) (*bo.Icecream, *pg.Tx, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *bo.Icecream
	if rf, ok := ret.Get(0).(func(context.Context, *pg.Tx, *bo.Icecream) *bo.Icecream); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bo.Icecream)
		}
	}

	var r1 *pg.Tx
	if rf, ok := ret.Get(1).(func(context.Context, *pg.Tx, *bo.Icecream) *pg.Tx); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pg.Tx)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *pg.Tx, *bo.Icecream) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TxUpdate provides a mock function with given fields: _a0, _a1, _a2
func (_m *IcecreamDataAccessor) TxUpdate(_a0 context.Context, _a1 *pg.Tx, _a2 *bo.Icecream) (*bo.Icecream, *pg.Tx, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *bo.Icecream
	if rf, ok := ret.Get(0).(func(context.Context, *pg.Tx, *bo.Icecream) *bo.Icecream); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bo.Icecream)
		}
	}

	var r1 *pg.Tx
	if rf, ok := ret.Get(1).(func(context.Context, *pg.Tx, *bo.Icecream) *pg.Tx); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pg.Tx)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *pg.Tx, *bo.Icecream) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
