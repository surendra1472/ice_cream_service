// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import bo "ic-service/app/model/bo"
import context "context"
import mock "github.com/stretchr/testify/mock"

import request "ic-service/app/model/request"

// IcecreamService is an autogenerated mock type for the IcecreamService type
type IcecreamService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, icecreamRequest
func (_m *IcecreamService) Delete(ctx context.Context, icecreamRequest request.IcecreamRequest) (*bo.Icecream, error) {
	ret := _m.Called(ctx, icecreamRequest)

	var r0 *bo.Icecream
	if rf, ok := ret.Get(0).(func(context.Context, request.IcecreamRequest) *bo.Icecream); ok {
		r0 = rf(ctx, icecreamRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bo.Icecream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.IcecreamRequest) error); ok {
		r1 = rf(ctx, icecreamRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartialUpdate provides a mock function with given fields: ctx, icecreamUpdateRequest
func (_m *IcecreamService) PartialUpdate(ctx context.Context, icecreamUpdateRequest request.IcecreamUpdateRequest) (*bo.Icecream, error) {
	ret := _m.Called(ctx, icecreamUpdateRequest)

	var r0 *bo.Icecream
	if rf, ok := ret.Get(0).(func(context.Context, request.IcecreamUpdateRequest) *bo.Icecream); ok {
		r0 = rf(ctx, icecreamUpdateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bo.Icecream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.IcecreamUpdateRequest) error); ok {
		r1 = rf(ctx, icecreamUpdateRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, icecreamRequest
func (_m *IcecreamService) Save(ctx context.Context, icecreamRequest request.IcecreamRequest) (*bo.Icecream, error) {
	ret := _m.Called(ctx, icecreamRequest)

	var r0 *bo.Icecream
	if rf, ok := ret.Get(0).(func(context.Context, request.IcecreamRequest) *bo.Icecream); ok {
		r0 = rf(ctx, icecreamRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bo.Icecream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.IcecreamRequest) error); ok {
		r1 = rf(ctx, icecreamRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
